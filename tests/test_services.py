import pandas as pd
import numpy as np
from datetime import datetime
from src.utils import df_to_transactions
from src.services import invest_roundup


def test_invest_roundup_valid_month_and_limit():
    """Проверяет работу invest_roundup для существующего месяца."""
    # Входные данные
    transactions = [
        {'Дата операции': '2024-11-25', 'Сумма операции': -123.45},
        {'Дата операции': '2024-11-28', 'Сумма операции': -78.90},
        {'Дата операции': '2024-12-05', 'Сумма операции': -56.78},
        {'Дата операции': '2024-12-10', 'Сумма операции': -90.12}
    ]
    month = "2024-12"
    limit = 100

    # Расчет
    result = invest_roundup(month, transactions, limit)

    # Правильный результат вручную (для иллюстрации):
    # Округляем расходы каждого месяца вверх до ближайшего числа, кратного 100:
    # Для 2024-11-25 (-123.45) → разница = 100 - 123.45 ≈ -23.45 (не учитывается)
    # Для 2024-11-28 (-78.90) → разница = 100 - 78.90 ≈ -78.90 (не учитывается)
    # Остальные месяцы исключаются фильтром (декабрь не обрабатывается)
    # Таким образом, общая сумма должна быть равна нулю, поскольку выбранная дата отсечки находится внутри диапазона расчетов.
    expected_value = 0.0

    # Проверка равенства результата ожиданиям
    assert abs(result - expected_value) < 1e-6, f'Ошибка в расчете: ожидали {expected_value}, получили {result}'


def test_invest_roundup_nonexistent_month():
    """Проверяет работу invest_roundup для несуществующего месяца."""
    # Входные данные
    transactions = [
        {'Дата операции': '2024-11-25', 'Сумма операции': -123.45},
        {'Дата операции': '2024-11-28', 'Сумма операции': -78.90},
        {'Дата операции': '2024-12-05', 'Сумма операции': -56.78},
        {'Дата операции': '2024-12-10', 'Сумма операции': -90.12}
    ]
    month = "2025-01"  # Этот месяц позже всех имеющихся транзакций
    limit = 100

    # Расчет
    result = invest_roundup(month, transactions, limit)

    # Все операции происходят раньше указанной даты (month), следовательно, ничего не попадает в диапазон
    expected_value = 0.0

    # Проверка равенства результата ожиданиям
    assert abs(result - expected_value) < 1e-6, f'Ошибка в расчете: ожидали {expected_value}, получили {result}'
